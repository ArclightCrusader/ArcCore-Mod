package com.thearclightcrusader.ArcCore.container;

import com.thearclightcrusader.ArcCore.tileEntity.TileEntityArcCoreFurnace;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.ICrafting;
import net.minecraft.inventory.Slot;
import net.minecraft.inventory.SlotFurnace;

public class ContainerArcCoreFurnace extends Container{
	
	private TileEntityArcCoreFurnace teArcCoreF;
	
	public int lastBurnTime;
	public int lastCurrentItemBurnTime;
	public int lastCookTime;

	public ContainerArcCoreFurnace(InventoryPlayer inventory, TileEntityArcCoreFurnace tileEntity){
		this.teArcCoreF = tileEntity;
		
		this.addSlotToContainer(new Slot(tileEntity, 0, 56, 35));
		this.addSlotToContainer(new Slot(tileEntity, 1, 8, 62));
		this.addSlotToContainer(new SlotFurnace(inventory.player, tileEntity, 2, 116, 35));
		
		for(int i = 0; i < 3; i++) {
			for(int j = 0; j < 9; j++) {
				this.addSlotToContainer(new Slot(inventory, j + i * 9 + 9, 8 + j * 18, 84 + i * 18));
			}
		}
		
		for(int i = 0; i < 9; i++){
			this.addSlotToContainer(new Slot(inventory, i, 8 + i * 18, 142));
		}
	}
	
	
	@Override
	public boolean canInteractWith(EntityPlayer p_75145_1_) {
		return true;
	}


public void addCraftingToCrafters(ICrafting iCrafting){
	super.addCraftingToCrafters(iCrafting);
	iCrafting.sendProgressBarUpdate(this, 0, this.teArcCoreF.cookTime);
	iCrafting.sendProgressBarUpdate(this, 1, this.teArcCoreF.burnTime);
	iCrafting.sendProgressBarUpdate(this, 2, this.teArcCoreF.currentItemBurnTime);
}

public void detectAndSendChanges(){
	super.detectAndSendChanges();
	for(int i = 0; i < this.crafters.size(); i++){
		ICrafting iCrafting = (ICrafting) this.crafters.get(i);
		
		if(this.lastCookTime != this.teArcCoreF.cookTime) {
			iCrafting.sendProgressBarUpdate(this, 0, this.teArcCoreF.cookTime);
		}
		
		if(this.lastBurnTime != this.teArcCoreF.burnTime) {
			iCrafting.sendProgressBarUpdate(this, 0, this.teArcCoreF.burnTime);
		}
		
		if(this.lastCurrentItemBurnTime != this.teArcCoreF.currentItemBurnTime) {
			iCrafting.sendProgressBarUpdate(this, 0, this.teArcCoreF.currentItemBurnTime);
		}
	}
	
	this.lastCookTime = this.teArcCoreF.cookTime;
	this.lastBurnTime = this.teArcCoreF.burnTime;
	this.lastCurrentItemBurnTime = this.teArcCoreF.currentItemBurnTime;
}

@SideOnly(Side.CLIENT)
public void updateProgressBar(int par1, int par2){
	
	if(par1 == 1){
		this.teArcCoreF.cookTime = par2;
	}
	
	if(par1 == 0){
		this.teArcCoreF.burnTime = par2;
	}
	
	if(par1 == 2){
		this.teArcCoreF.currentItemBurnTime = par2;
	}
}

}
