package com.thearclightcrusader.ArcCore.tileEntity;

import com.thearclightcrusader.ArcCore.Main;
import com.thearclightcrusader.ArcCore.blocks.ArcCoreFurnace;

import net.minecraft.block.Block;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.ISidedInventory;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.item.crafting.FurnaceRecipes;
import net.minecraft.tileentity.TileEntity;

public class TileEntityArcCoreFurnace extends TileEntity implements ISidedInventory{
	
	private String localizedName;
	//Slot 1 = fuel, Slot 0 = Input, Slot 2 = Output
	private static final int[] slots_top = new int[]{0};
	private static final int[] slots_bottom = new int[]{2, 1};
	private static final int[] slots_side = new int[]{1};
	//Number of slots
	private ItemStack[] slots = new ItemStack[3];
	
	private int furnaceSpeed = 150;
	
	public int burnTime;
	
	public int currentItemBurnTime;
	
	public int cookTime;
	
	public void setGuiDisplayName(String displayName) {
		this.localizedName = displayName;
		
	}
	
	public String getInventoryName(){
		return this.hasCustomInventoryName() ? this.localizedName : "container.arcCoreFurnace";
	}

	public boolean hasCustomInventoryName() {
		
		return this.localizedName != null && this.localizedName.length() > 0;
	}
	
	public int getSizeInventory() {
		return this.slots.length;
	}

	@Override
	public ItemStack getStackInSlot(int var1) {
		return this.slots[var1];
	}

	@Override
	public ItemStack decrStackSize(int var1, int var2) {
		if(this.slots[var1] !=null){
			ItemStack itemStack;
			
			if(this.slots[var1].stackSize <= var2){
				itemStack = this.slots[var1];
				this.slots[var1] = null;
				return itemStack;
			}else{
				itemStack = this.slots[var1].splitStack(var2);
				
				if(this.slots[var1].stackSize == 0){
					this.slots[var1] = null;
				}
			}
		}
		
		return null;
	}

	@Override
	public ItemStack getStackInSlotOnClosing(int i) {
		if(this.slots[i]!= null){
			ItemStack itemStack = this.slots[i];
			this.slots[i] = null;
			return itemStack;
		}
		return null;
	}

	@Override
	public void setInventorySlotContents(int i, ItemStack itemStack) {
		this.slots[i] = itemStack;
		
		if(itemStack != null && itemStack.stackSize > this.getInventoryStackLimit()){
			itemStack.stackSize = this.getInventoryStackLimit();
		}
		
	}

	@Override
	public int getInventoryStackLimit() {
		return 64;
	}

	@Override
	public boolean isUseableByPlayer(EntityPlayer entityPlayer) {
		return this.worldObj.getTileEntity(this.xCoord, this.yCoord, this.zCoord) != this ?  false : entityPlayer.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
	}

	public void openInventory() {}
	public void closeInventory() {}

	@Override
	public boolean isItemValidForSlot(int i, ItemStack itemStack) {
		return i == 2 ? false : (i == 1 ? isItemFuel(itemStack): true);
	}

	public boolean isItemFuel(ItemStack itemStack) {
			return getItemBurnTime(itemStack) > 0;
	}

	private int getItemBurnTime(ItemStack itemStack) {
		if(itemStack == null){
			return 0;
		}else{
			Item item = itemStack.getItem();
			
			if(item instanceof ItemBlock && Block.getBlockFromItem(item) != Blocks.air) {
				Block block = Block.getBlockFromItem(item);
				 
				if(item == Main.calciumAcetate) return 300;
			
			}
		}
		return 0;
	}
	
	public boolean isBurning(){
		return this.burnTime > 0;
	}
	
	public void updateEntity() {
		boolean flag = this.burnTime > 0;
		boolean flag1 = false;
		
		if(this.isBurning()){
			this.burnTime--;
		}
		if(!this.worldObj.isRemote){
			if(this.isBurning() && this.canSmelt()){
				this.currentItemBurnTime = this.burnTime = getItemBurnTime(this.slots[1]);
			
				if(this.isBurning()){
					flag1 = true;
					
					if(this.slots[1] != null){
						this.slots[1].stackSize--;
						
						//When using items like lava buckets, returns yo bucket
						if(this.slots[1].stackSize == 0){
							this.slots[1] = this.slots[1].getItem().getContainerItem(this.slots[1]);
						}
					}
				}
			}
			
			//Continue cooking
			if(this.isBurning() && this.canSmelt()) {
				this.cookTime++;
				//When item has cooked for long enough, finishes item
				if(this.cookTime == this.furnaceSpeed) {
					this.cookTime = 0;
					this.smeltItem();
					flag1 = true;
				}
			}else{
				this.cookTime = 0;
			}
			
			if(flag != this.isBurning()){
				flag1 = true;
				ArcCoreFurnace.updateArcCoreFurnaceBlockState(this.burnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
			}
		}
		
		if(flag1) {
			this.markDirty();
		}
	
	}
	
	public boolean canSmelt() {
		if(this.slots[0] == null) {
			return false;
		}else{
			ItemStack itemStack = FurnaceRecipes.smelting().getSmeltingResult(this.slots[0]);
			
			if(itemStack == null) return false;
			if(this.slots[2] == null) return true;
			if(this.slots[2].isItemEqual(itemStack)) return false;
			
			int result = this.slots[2].stackSize + itemStack.stackSize;
			
			//Prevents from going over max container and item stack size
			return (result <= getInventoryStackLimit() && result <= itemStack.getMaxStackSize());
		}
	}
		
	public void smeltItem(){
		if(this.canSmelt()){
			ItemStack itemStack = FurnaceRecipes.smelting().getSmeltingResult(this.slots[0]);
			
			
			if(this.slots[2] == null){
				this.slots[2] = itemStack.copy();
			}else if(this.slots[2].isItemEqual(itemStack)){
				this.slots[2].stackSize += itemStack.stackSize;
			}
			
			this.slots[0].stackSize--;
			
			if(this.slots[0].stackSize <= 0) {
				this.slots[0] = null;
			}
		}
	}

	@Override
	public int[] getAccessibleSlotsFromSide(int var1) {
		return var1 == 0 ? slots_bottom : (var1 == 1 ? slots_top : slots_side);
	}

	@Override
	//For hoppers
	public boolean canInsertItem(int i, ItemStack itemStack, int j) {
		return this.isItemValidForSlot(i, itemStack);
	}

	@Override
	public boolean canExtractItem(int i, ItemStack itemStack, int j) {
		return j != 0 || i != 1 || itemStack.getItem() == Items.bucket;
	}

}
