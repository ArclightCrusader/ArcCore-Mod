package com.thearclightcrusader.ArcCore.dimensions;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

import com.thearclightcrusader.ArcCore.worldgen.BiomeFairyPlains;
import com.thearclightcrusader.ArcCore.worldgen.BiomeFireLands;
import com.thearclightcrusader.ArcCore.worldgen.BiomesAC;

import net.minecraft.world.ChunkPosition;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.biome.WorldChunkManager;
import net.minecraft.world.biome.WorldChunkManagerHell;
import scala.collection.concurrent.Debug;

public class WorldChunkManagerFairy extends WorldChunkManagerHell {
	
	private BiomeGenBase biomeGenerator;
	private BiomeGenBase biomeFairy;
	private BiomeGenBase biomeIce;
	private int radius = 250;
	private List biomeList;
	private BiomeGenBase[] mainBiomes;
	private BiomeGenBase[] mountainBiomes;

	  public WorldChunkManagerFairy(BiomeGenBase biome, BiomeGenBase[] biomes1, BiomeGenBase[] biomes2, float f) {
		  super(biome, f);
		  this.mainBiomes = biomes1;
		  this.mountainBiomes = biomes2;
	}
	  
	  public BiomeGenBase getBiomeGenAt(int x, int z)
	    {
		  if((x * x) + (z * z) >= radius * radius){
			  System.out.print("Working");
			  return BiomesAC.biomeIceMountains;
			  
			  
		  }else{
			  
			  return BiomesAC.biomeGildedForest;
		  }
	    }
	  
	  public BiomeGenBase[] getBiomesForGeneration(BiomeGenBase[] p_76937_1_, int x, int z, int j, int k)
	    {
		  if((x * x) + (z * z) >= radius * radius){
			  System.out.print("Working");
			  return this.mountainBiomes;
			  
			  
		  }else{
			  
			  return this.mainBiomes;
		  }
	    }
	  
	    /**
	     * Return a list of biomes for the specified blocks. Args: listToReuse, x, y, width, length, cacheFlag (if false,
	     * don't check biomeCache to avoid infinite loop in BiomeCacheBlock)
	     */
	    public BiomeGenBase[] getBiomeGenAt(BiomeGenBase[] p_76931_1_, int p_76931_2_, int p_76931_3_, int p_76931_4_, int p_76931_5_, boolean p_76931_6_)
	    {
	        return this.loadBlockGeneratorData(p_76931_1_, p_76931_2_, p_76931_3_, p_76931_4_, p_76931_5_);
	    }

	    public ChunkPosition findBiomePosition(int p_150795_1_, int p_150795_2_, int p_150795_3_, List p_150795_4_, Random p_150795_5_)
	    {
	        return p_150795_4_.contains(this.biomeGenerator) ? new ChunkPosition(p_150795_1_ - p_150795_3_ + p_150795_5_.nextInt(p_150795_3_ * 2 + 1), 0, p_150795_2_ - p_150795_3_ + p_150795_5_.nextInt(p_150795_3_ * 2 + 1)) : null;
	    }

	    /**
	     * checks given Chunk's Biomes against List of allowed ones
	     */
	    public boolean areBiomesViable(int p_76940_1_, int p_76940_2_, int p_76940_3_, List p_76940_4_)
	    {
	        return p_76940_4_.contains(this.biomeGenerator);
	    }
}
