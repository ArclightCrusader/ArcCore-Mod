package com.thearclightcrusader.ArcCore.tileEntity;

import com.thearclightcrusader.ArcCore.Main;

import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.ISidedInventory;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.tileentity.TileEntity;

public class TileEntityArcCoreInfuser extends TileEntity implements ISidedInventory {

	private ItemStack slots[];
	
	public int trioPower;
	public int trioCookTime;
	public static final int maxPower = 5000;
	public static final int infuserSpeed = 100;
	
	private static final int[] slots_top = new int[] {0, 1, 2};
	private static final int[] slots_bottom = new int[] {4};
	private static final int[] slots_side = new int[]{3};
	
	private String customName;
	
	public TileEntityArcCoreInfuser(){
		slots = new ItemStack[5];
	}

	@Override
	public int getSizeInventory() {
		return slots.length;
	}

	@Override
	public ItemStack getStackInSlot(int i) {
		return slots[i];
	}

	@Override
	public ItemStack getStackInSlotOnClosing(int i) {
		if(slots[i] != null){
			ItemStack itemStack = slots[i];
			slots[i] = null;
			return itemStack;
		}else{
			return null;
		}
	}

	@Override
	public void setInventorySlotContents(int i, ItemStack itemStack) {
		slots[i] = itemStack;
		if(itemStack != null && itemStack.stackSize > getInventoryStackLimit()){
			itemStack.stackSize = getInventoryStackLimit();
		}
	}

	@Override
	public String getInventoryName() {
		return this.hasCustomInventoryName() ? this.customName : "container.arcCoreInfuser";
	}
	
	@Override
	public boolean hasCustomInventoryName() {
		return this.customName != null && this.customName.length() > 0;
	}

	@Override
	public int getInventoryStackLimit() {
		return 64;
	}

	@Override
	public boolean isUseableByPlayer(EntityPlayer player) {
		if(worldObj.getTileEntity(xCoord, yCoord, zCoord) != this){
			return false;
		}else{
			return player.getDistanceSq((double)xCoord + 0.5D, (double)yCoord + 0.5D, (double)zCoord + 0.5D) <= 64;
		}
	}

	public void openInventory() {}
	public void closeInventory() {}

	@Override
	public boolean isItemValidForSlot(int i, ItemStack itemStack) {
		return i == 3 ? false : (i == 1 ? hasItemPower(itemStack) : true);
	}
	
	public boolean hasItemPower(ItemStack itemStack){
		return getItemPower(itemStack) > 0;
	}
	
	private static int getItemPower(ItemStack itemStack){
		if(itemStack == null){
			return 0;
		}else{
			Item item = itemStack.getItem();
			
			if(item == Main.fuelGel) return 50;
			if(item == Main.survivalistFuelGel) return 75;
			if(item == Main.organicFuelGel) return 30;
			
			return 0;
		}
	}
	
	public ItemStack decrStackSize(int i, int j){
		if(slots[i] != null){
			if(slots[i].stackSize <= j){
				ItemStack itemStack = slots[i];
				slots[i] = null;
				return itemStack;
			}
			
			ItemStack itemStack1 = slots[i].splitStack(j);
			
			if(slots[i].stackSize == 0){
				slots[i] = null;
			}
			return itemStack1;
		}else{
			return null;
		}
	}
	
	public void readFromNBT(NBTTagCompound nbt){
		super.readFromNBT(nbt);
		NBTTagList list = nbt.getTagList("Items", 10);
		slots = new ItemStack[getSizeInventory()];
		
		for(int i = 0; i < list.tagCount(); i++){
			NBTTagCompound nbt1 = (NBTTagCompound)list.getCompoundTagAt(i);
			byte b0 = nbt1.getByte("Slot");
			
			if(b0 >= 0 && b0 < slots.length){
				slots[b0] = ItemStack.loadItemStackFromNBT(nbt1);
			}
		}
		
		trioPower = nbt.getShort("PowerTime");
		trioCookTime = nbt.getShort("CookTime");
	}
	
	public void writeToNBT(NBTTagCompound nbt){
		super.writeToNBT(nbt);
		nbt.setShort("PowerTime", (short)trioPower);
		nbt.setShort("CookTime", (short)trioCookTime);
		NBTTagList list = new NBTTagList();
		
		for(int i = 0; i < slots.length; i++){
			if(slots[i] != null){
				NBTTagCompound nbt1 = new NBTTagCompound();
				nbt1.setByte("Slot", (byte)i);
				slots[i].writeToNBT(nbt1);
				list.appendTag(nbt1);
			}
		}
		
		nbt.setTag("Items", list);
	}

	@Override
	public int[] getAccessibleSlotsFromSide(int i) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean canInsertItem(int var1, ItemStack itemStack, int var2) {
		return this.isItemValidForSlot(var1, itemStack);
	}

	@Override
	public boolean canExtractItem(int i, ItemStack itemStack, int j) {
		return j != 0 || i != 1 || itemStack.getItem() == Items.bucket;
	}
	
	public int getInfuserProgressScaled(int i){
		return trioCookTime * i / this.infuserSpeed;
	}
	
	public int getPowerRemaingScaled(int i){
		return trioPower * i / maxPower;
	}
	
	private boolean canInfuse(){
		return false;
	}
	
	private void infuseItem(){
		
	}
	
	public void updateEntity(){
		
	}
	
}
