package com.thearclightcrusader.ArcCore.dimensions;

import java.util.List;
import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.entity.EnumCreatureType;
import net.minecraft.init.Blocks;
import net.minecraft.util.IProgressUpdate;
import net.minecraft.util.MathHelper;
import net.minecraft.world.ChunkPosition;
import net.minecraft.world.World;
import net.minecraft.world.WorldType;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.chunk.Chunk;
import net.minecraft.world.chunk.IChunkProvider;
import net.minecraft.world.gen.MapGenBase;
import net.minecraft.world.gen.MapGenCaves;
import net.minecraft.world.gen.MapGenRavine;
import net.minecraft.world.gen.NoiseGenerator;
import net.minecraft.world.gen.NoiseGeneratorOctaves;
import net.minecraft.world.gen.NoiseGeneratorPerlin;
import net.minecraft.world.gen.structure.MapGenMineshaft;
import net.minecraft.world.gen.structure.MapGenScatteredFeature;
import net.minecraft.world.gen.structure.MapGenStronghold;
import net.minecraft.world.gen.structure.MapGenVillage;
import net.minecraftforge.event.terraingen.InitMapGenEvent.EventType;
import net.minecraftforge.event.terraingen.TerrainGen;

public class ChunkProviderFairy implements IChunkProvider{
	
	  private Random rand;
	    private NoiseGeneratorOctaves noise1;
	    private NoiseGeneratorOctaves noise2;
	    private NoiseGeneratorOctaves noise3;
	    private NoiseGeneratorPerlin noiseP;
	    /** A NoiseGeneratorOctaves used in generating terrain */
	    public NoiseGeneratorOctaves noiseGen5;
	    /** A NoiseGeneratorOctaves used in generating terrain */
	    public NoiseGeneratorOctaves noiseGen6;
	    public NoiseGeneratorOctaves mobSpawnerNoise;
	    /** Reference to the World object. */
	    private World worldObj;
	    /** are map structures going to be generated (e.g. strongholds) */
	    private final boolean mapFeaturesEnabled;
	    private WorldType worldType;
	    private final double[] d0;
	    private final float[] parabolicField;
	    private double[] stoneNoise = new double[256];
	    private MapGenBase caveGenerator = new MapGenCaves();
	    /** Holds Stronghold Generator */
	    private MapGenStronghold strongholdGenerator = new MapGenStronghold();
	    /** Holds Village Generator */
	    private MapGenVillage villageGenerator = new MapGenVillage();
	    /** Holds Mineshaft Generator */
	    private MapGenMineshaft mineshaftGenerator = new MapGenMineshaft();
	    private MapGenScatteredFeature scatteredFeatureGenerator = new MapGenScatteredFeature();
	    /** Holds ravine generator */
	    private MapGenBase ravineGenerator = new MapGenRavine();
	    /** The biomes that are used to generate the chunk */
	    private BiomeGenBase[] biomesForGeneration;
	    double[] d1;
	    double[] d2;
	    double[] d3;
	    double[] d4;
	    int[][] i = new int[32][32];
	    private static final String __OBFID = "CL_00000396";
	
	    {
	        caveGenerator = TerrainGen.getModdedMapGen(caveGenerator, EventType.CAVE);
	        strongholdGenerator = (MapGenStronghold) TerrainGen.getModdedMapGen(strongholdGenerator, EventType.STRONGHOLD);
	        villageGenerator = (MapGenVillage) TerrainGen.getModdedMapGen(villageGenerator, EventType.VILLAGE);
	        mineshaftGenerator = (MapGenMineshaft) TerrainGen.getModdedMapGen(mineshaftGenerator, EventType.MINESHAFT);
	        scatteredFeatureGenerator = (MapGenScatteredFeature) TerrainGen.getModdedMapGen(scatteredFeatureGenerator, EventType.SCATTERED_FEATURE);
	        ravineGenerator = TerrainGen.getModdedMapGen(ravineGenerator, EventType.RAVINE);
	    }
	    
	public ChunkProviderFairy(World world, long l, boolean b){
		this.worldObj = world;
		   this.mapFeaturesEnabled = b;
	        this.worldType = world.getWorldInfo().getTerrainType();
	        this.rand = new Random(l);
	        this.noise1 = new NoiseGeneratorOctaves(this.rand, 16);
	        this.noise2 = new NoiseGeneratorOctaves(this.rand, 16);
	        this.noise3 = new NoiseGeneratorOctaves(this.rand, 8);
	        this.noiseP = new NoiseGeneratorPerlin(this.rand, 4);
	        this.noiseGen5 = new NoiseGeneratorOctaves(this.rand, 10);
	        this.noiseGen6 = new NoiseGeneratorOctaves(this.rand, 16);
	        this.mobSpawnerNoise = new NoiseGeneratorOctaves(this.rand, 8);
	        this.d0 = new double[825];
	        this.parabolicField = new float[25];

	        for (int j = -2; j <= 2; ++j)
	        {
	            for (int k = -2; k <= 2; ++k)
	            {
	                float f = 10.0F / MathHelper.sqrt_float((float)(j * j + k * k) + 0.2F);
	                this.parabolicField[j + 2 + (k + 2) * 5] = f;
	            }
	        }
	        
	     NoiseGenerator[] noiseGens = {noise1, noise2, noise3, noiseP, noiseGen5, noiseGen6, mobSpawnerNoise};
	     noiseGens = TerrainGen.getModdedNoiseGenerators(world, this.rand, noiseGens);
	       this.noise1 = (NoiseGeneratorOctaves)noiseGens[0];
	       this.noise2 = (NoiseGeneratorOctaves)noiseGens[1];
	       this.noise3 = (NoiseGeneratorOctaves)noiseGens[2];
	       this.noiseP = (NoiseGeneratorPerlin)noiseGens[3];
	       this.noiseGen5 = (NoiseGeneratorOctaves)noiseGens[4];
	       this.noiseGen6 = (NoiseGeneratorOctaves)noiseGens[5];
	       this.mobSpawnerNoise = (NoiseGeneratorOctaves)noiseGens[6];
	
	}
	
	@Override
	public boolean chunkExists(int p_73149_1_, int p_73149_2_) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Chunk provideChunk(int chunkX, int chunkZ) {
		
	}
		random.setSeed(chunkX * 341873128712L + chunkZ * 132897987541L);

		biomesForGeneration = worldObj.getWorldChunkManager().getBiomeGenAt(biomesForGeneration, chunkX * 16, chunkZ * 16, 16, 16, false);
		int worldHeight = worldObj.provider.getActualHeight();
		Block[] blocks = new Block[65536];
		byte[] metadata = new byte[blocks.length];

		for (int a = 0; a < blocks.length; ++i)
		{
			blocks[a] = Blocks.stone;
			metadata[a] = (byte)0;
	}

	@Override
	public Chunk loadChunk(int p_73158_1_, int p_73158_2_) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void populate(IChunkProvider p_73153_1_, int p_73153_2_, int p_73153_3_) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean saveChunks(boolean p_73151_1_, IProgressUpdate p_73151_2_) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean unloadQueuedChunks() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean canSave() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public String makeString() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List getPossibleCreatures(EnumCreatureType p_73155_1_, int p_73155_2_, int p_73155_3_, int p_73155_4_) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ChunkPosition func_147416_a(World p_147416_1_, String p_147416_2_, int p_147416_3_, int p_147416_4_,
			int p_147416_5_) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int getLoadedChunkCount() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void recreateStructures(int p_82695_1_, int p_82695_2_) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void saveExtraData() {
		// TODO Auto-generated method stub
		
	}

}
